---

- name: Read PlaybookIntegrity Specs
  k8s_info:
    kind: PlaybookIntegrity
    api_version: tower.ansible.com/v1alpha1
    name: "{{ lookup('env', 'PLAYBOOKINTEGRITY_NAME') }}"
    namespace: "{{ lookup('env', 'PLAYBOOKINTEGRITY_NAMESPACE') }}"
  register: playbook_integrity

- name: Set AAP vars
  set_fact:
    aap_api_url: "{{ lookup('env','CONTROLLER_HOST') | trim }}/api/v2/"
    aap_token: "{{ lookup('env','TOKEN') | b64decode | trim }}"

- name: Debug
  debug:
    msg: "aap_api_url: '{{ aap_api_url }}', aap_token: '{{ aap_token }}'"

- name: Install jq if not exist
  shell: |
    if ! command -v jq > /dev/null; then
      curl -o ./jq -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod +x ./jq
    fi

- name: Update Project configuration based on PlaybookIntegrity
  shell: | 
    curl -s -k -f -H 'Content-Type: application/json' -XGET --user '{{ aap_token }}' '{{ aap_api_url }}job_templates/' > job_templates.json
    cat job_templates.json | ./jq .results | ./jq '.[] | select(.name=="{{ lookup('env','CONTROLLER_JOB_TEMPLATE_NAME') }}")' > target_job_template.json
    proj_id=$(cat target_job_template.json | ./jq -r .project)
    echo $proj_id > project_id
    pubkey={{ playbook_integrity['resources'][0]['spec']['public_key'] }}
    curl -s -k -f -H 'Content-Type: application/json' -XGET --user '{{ aap_token }}' "{{ aap_api_url }}projects/$proj_id/" > target_project.json
    curl -s -k -f -H 'Content-Type: application/json' -XPATCH --user '{{ aap_token }}' "{{ aap_api_url }}projects/$proj_id/" -d "{\"playbook_integrity_enabled\":true,\"playbook_integrity_public_key\":\"$pubkey\"}"
    cat target_project.json | ./jq -r .name > project_name

- name: Debug
  debug:
    msg: "host: {{ lookup('env','CONTROLLER_HOST') | trim }}, username: {{ aap_token.split(':')[0] }}, password: {{ aap_token.split(':')[1] }}"

- name: Trigger project update
  block:
    - name: Trigger project update
      awx.awx.project_update:
        name: "{{ lookup('file', 'project_name') }}"
        controller_host: "{{ lookup('env','CONTROLLER_HOST') | trim }}"
        controller_username: "{{ aap_token.split(':')[0] }}"
        controller_password: "{{ aap_token.split(':')[1] }}"
        validate_certs: "no"
      register: project_update_job

- name: Debug
  debug:
    var: project_update_job

- name: Get playbook integrity result from API
  shell: | 
    curl -s -k -f -H 'Content-Type: application/json' -XGET --user '{{ aap_token }}' "{{ aap_api_url }}projects/{{ lookup('file', 'project_id') }}/" > updated_project.json
    cat updated_project.json | ./jq -r .playbook_integrity_latest_result.verified > playbook_integrity_verified
    cat updated_project.json | ./jq -r .playbook_integrity_latest_result.error > playbook_integrity_error

- name: Update PlaybookIntegrity definition with Tower job id
  k8s:
    state: present
    definition:
      kind: PlaybookIntegrity
      apiVersion: tower.ansible.com/v1alpha1
      metadata:
        name: "{{ lookup('env', 'PLAYBOOKINTEGRITY_NAME') }}"
        namespace: "{{ lookup('env', 'PLAYBOOKINTEGRITY_NAMESPACE') }}"
        labels:
          tower_job_id: "{{ project_update_job.id }}"

- name: Update PlaybookIntegrity status with Tower project update status and url
  k8s_status:
    api_version: tower.ansible.com/v1alpha1
    kind: PlaybookIntegrity
    name: "{{ lookup('env', 'PLAYBOOKINTEGRITY_NAME') }}"
    namespace: "{{ lookup('env', 'PLAYBOOKINTEGRITY_NAMESPACE') }}"
    status:
      playbookIntegrityResult:
        elapsed: "{{ project_update_job.elapsed }}"
        finished: "{{ project_update_job.finished }}"
        started: "{{ project_update_job.started }}"
        status: "{{ project_update_job.status }}"
        verified: "{{ lookup('file', 'playbook_integrity_verified') }}"
        error: "{{ lookup('file', 'playbook_integrity_error') }}"