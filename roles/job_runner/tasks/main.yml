---

- name: Read AnsibleJob Specs
  k8s_info:
    kind: AnsibleJob
    api_version: tower.ansible.com/v1alpha1
    name: "{{ lookup('env', 'ANSIBLEJOB_NAME') }}"
    namespace: "{{ lookup('env', 'ANSIBLEJOB_NAMESPACE') }}"
  register: ansible_job

- name: Set aap variables
  set_fact:
    controller_host: "{{ lookup('env','CONTROLLER_HOST') }}"
    controller_token: "{{ lookup('env','TOKEN') | b64decode }}"

- name: Launch a job, if error update AnsibleJob status then end play
  block:
    - name: Launch job
      awx.awx.tower_job_launch:
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_token.split(':')[0] }}"
        controller_password: "{{ controller_token.split(':')[1] }}"
        job_template: "{{ lookup('env','CONTROLLER_JOB_TEMPLATE_NAME') }}"
        extra_vars: "{{ ansible_job['resources'][0]['spec']['extra_vars'] | default(omit) }}"
        inventory: "{{ ansible_job['resources'][0]['spec']['inventory'] | default(omit) }}"
      register: job
  rescue:
    - name: Update status if job resulted in an error
      k8s_status:
        api_version: tower.ansible.com/v1alpha1
        kind: AnsibleJob
        name: "{{ lookup('env', 'ANSIBLEJOB_NAME') }}"
        namespace: "{{ lookup('env', 'ANSIBLEJOB_NAMESPACE') }}"
        status:
          ansibleJobResult:
            status: "error"
    - name: End playbook run
      meta: end_play

- name: Update AnsibleJob definition with Tower job id
  k8s:
    state: present
    definition:
      kind: AnsibleJob
      apiVersion: tower.ansible.com/v1alpha1
      metadata:
        name: "{{ lookup('env', 'ANSIBLEJOB_NAME') }}"
        namespace: "{{ lookup('env', 'ANSIBLEJOB_NAMESPACE') }}"
        labels:
          tower_job_id: "{{ job.id }}"

- name: Update AnsibleJob status with Tower job status and url
  k8s_status:
    api_version: tower.ansible.com/v1alpha1
    kind: AnsibleJob
    name: "{{ lookup('env', 'ANSIBLEJOB_NAME') }}"
    namespace: "{{ lookup('env', 'ANSIBLEJOB_NAMESPACE') }}"
    status:
      ansibleJobResult:
        changed: "{{ job.changed }}"
        failed: "{{ job.failed }}"
        status: "{{ job.status }}"
        url: "{{ lookup('env', 'TOWER_HOST') + '/#/jobs/playbook/' + (job.id|string) }}"

- name: Wait for the tower job, if error update AnsibleJob status then end play
  block:
    - name: Register Job result when complete
      awx.awx.tower_job_wait:
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_token.split(':')[0] }}"
        controller_password: "{{ controller_token.split(':')[1] }}"
        job_id: "{{ job.id }}"
      register: job_result
  rescue:
    - name: Get playbook integrity result of the job
      shell: |
        curl -s -k -f -H 'Content-Type: application/json' -XGET --user '{{ controller_token }}' '{{ controller_host }}/api/v2/jobs/{{ job.id }}/' > job.json
        cat job.json | jq -r '.playbook_integrity_result' > playbook_integrity_result

    - name: Debug playbook_integrity_result
      debug:
        msg: "playbook_integrity_result: {{ lookup('file', 'playbook_integrity_result') }}"

    - name: Update status if job results in an error
      k8s_status:
        api_version: tower.ansible.com/v1alpha1
        kind: AnsibleJob
        name: "{{ lookup('env', 'ANSIBLEJOB_NAME') }}"
        namespace: "{{ lookup('env', 'ANSIBLEJOB_NAMESPACE') }}"
        status:
          ansibleJobResult:
            status: "error"
            playbookIntegrity:  "{{ lookup('file', 'playbook_integrity_result') }}"
    - name: End playbook run
      meta: end_play

- name: Get playbook integrity result of the job
  shell: |
    curl -s -k -f -H 'Content-Type: application/json' -XGET --user '{{ controller_token }}' '{{ controller_host }}/api/v2/jobs/{{ job.id }}/' > job.json
    cat job.json | jq -r '.playbook_integrity_result' > playbook_integrity_result

- name: Update AnsibleJob status with Tower job result
  k8s_status:
    api_version: tower.ansible.com/v1alpha1
    kind: AnsibleJob
    name: "{{ lookup('env', 'ANSIBLEJOB_NAME') }}"
    namespace: "{{ lookup('env', 'ANSIBLEJOB_NAMESPACE') }}"
    status:
      ansibleJobResult:
        elapsed: "{{ job_result.elapsed }}"
        finished: "{{ job_result.finished }}"
        started: "{{ job_result.started }}"
        status: "{{ job_result.status }}"
        playbookIntegrity:  "{{ lookup('file', 'playbook_integrity_result') }}"
